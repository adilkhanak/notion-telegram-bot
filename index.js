import os
import asyncio
import logging
from notion_client import AsyncClient
import aiohttp
from uuid import uuid4

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
NOTION_TOKEN = os.getenv("NOTION_TOKEN")
DATABASE_ID = os.getenv("DATABASE_ID")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([NOTION_TOKEN, DATABASE_ID, TELEGRAM_TOKEN, CHAT_ID]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise EnvironmentError("NOTION_TOKEN, DATABASE_ID, TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Notion
notion = AsyncClient(auth=NOTION_TOKEN)
last_state = {}


async def fetch_database():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã Notion."""
    try:
        response = await notion.databases.query(database_id=DATABASE_ID)
        logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Notion")
        return response.get("results", [])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion: {e}")
        return []


async def extract_fields(page):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion."""
    try:
        props = page.get("properties", {})
        title_data = props.get("Name", {}).get("title", [])
        name = title_data[0].get("plain_text", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") if title_data else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        status = props.get("Status", {}).get("select", {}).get("name", "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞")
        responsible = props.get("Responsible", {}).get("people", [])
        responsible_name = responsible[0].get("name", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω") if responsible else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        deadline = props.get("Deadline", {}).get("date", {}).get("start", "–ë–µ–∑ —Å—Ä–æ–∫–∞")
        return name, status, responsible_name, deadline
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π: {e}")
        return "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"


async def send_telegram_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text, "parse_mode": "HTML"}
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {response.status} - {await response.text()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


def format_message(event_type, name, status, responsible, deadline):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram."""
    emojis = {
        "new": "üÜï",
        "update": "üîÑ",
        "task": "üìå",
        "status": "üìä",
        "user": "üë§",
        "date": "üìÖ"
    }
    return (
        f"{emojis[event_type]} <b>{'–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞' if event_type == 'new' else '–ò–∑–º–µ–Ω–µ–Ω–æ'}</b>\n"
        f"{emojis['task']} <b>{name}</b>\n"
        f"{emojis['status']} <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"{emojis['user']} <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {responsible}\n"
        f"{emojis['date']} <b>–°—Ä–æ–∫:</b> {deadline}"
    )


async def track_changes():
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ Notion."""
    global last_state
    pages = await fetch_database()
    for page in pages:
        page_id = page["id"]
        name, status, responsible, deadline = await extract_fields(page)
        current = f"{name}|{status}|{responsible}|{deadline}"

        if page_id not in last_state:
            msg = format_message("new", name, status, responsible, deadline)
            await send_telegram_message(msg)
        elif last_state[page_id] != current:
            msg = format_message("update", name, status, responsible, deadline)
            await send_telegram_message(msg)

        last_state[page_id] = current


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Notion")
            await track_changes()
            await asyncio.sleep(20)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"–û—Å–Ω–æ–≤–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await send_telegram_message(f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:</b> {str(e)}")
            await asyncio.sleep(60)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise
