require('dotenv').config();
const axios = require('axios');
const winston = require('winston');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
    winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}] ${message}`)
  ),
  transports: [new winston.transports.Console()]
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const NOTION_TOKEN = process.env.NOTION_TOKEN;
const DATABASE_ID = process.env.DATABASE_ID;
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const CHAT_ID = process.env.CHAT_ID;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!NOTION_TOKEN || !DATABASE_ID || !TELEGRAM_TOKEN || !CHAT_ID) {
  logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NOTION_TOKEN, DATABASE_ID, TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID');
  process.exit(1);
}

let previousState = {};

async function fetchTasks() {
  try {
    logger.info('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á –≤ Notion');
    const res = await axios.post(
      `https://api.notion.com/v1/databases/${DATABASE_ID}/query`,
      {},
      {
        headers: {
          Authorization: `Bearer ${NOTION_TOKEN}`,
          'Notion-Version': '2022-06-28',
          'Content-Type': 'application/json'
        },
        timeout: 10000 // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
      }
    );

    const changes = [];
    for (const page of res.data.results) {
      const id = page.id;
      const props = page.properties;

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      logger.debug(`–°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${id}: ${JSON.stringify(props, null, 2)}`);

      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
      const name = props.Name?.title?.[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      const status = props.Status?.select?.name || '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞';
      const responsible = props.Responsible?.people?.[0]?.name || '–ë–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ';
      const deadline = props.Deadline?.date?.start || '–ë–µ–∑ —Å—Ä–æ–∫–∞';

      const current = `${name}|${status}|${responsible}|${deadline}`;

      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ HTML
      const formatMessage = (type) => `
        ${type === 'new' ? 'üÜï <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</b>' : 'üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–æ</b>'}
        üìå <b>–ó–∞–¥–∞—á–∞:</b> ${name}
        üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${status}
        üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${responsible}
        üìÖ <b>–°—Ä–æ–∫:</b> ${deadline}
      `;

      if (!previousState[id]) {
        changes.push(formatMessage('new'));
        logger.info(`–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${current}`);
      } else if (previousState[id] !== current) {
        changes.push(formatMessage('update'));
        logger.info(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${current}`);
      }

      previousState[id] = current;
    }

    if (changes.length > 0) {
      await axios.post(
        `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`,
        {
          chat_id: CHAT_ID,
          text: changes.join('\n\n'),
          parse_mode: 'HTML'
        },
        { timeout: 10000 }
      );
      logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${changes.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram`);
    } else {
      logger.info('–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
  } catch (error) {
    const errorMsg = error.response?.data?.message || error.message;
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: ${errorMsg}`);
    await axios.post(
      `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`,
      {
        chat_id: CHAT_ID,
        text: `‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:</b> ${errorMsg}`,
        parse_mode: 'HTML'
      },
      { timeout: 10000 }
    ).catch((err) => logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram: ${err.message}`));
  }
}

// –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 120 —Å–µ–∫—É–Ω–¥ (2 –º–∏–Ω—É—Ç—ã)
setInterval(() => {
  fetchTasks().catch((err) => logger.error(`–û—à–∏–±–∫–∞ –≤ setInterval: ${err.message}`));
}, 120000);

// –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
fetchTasks().catch((err) => logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ: ${err.message}`));
